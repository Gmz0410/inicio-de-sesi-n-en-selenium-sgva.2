from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import time
import json
import os

# Funci√≥n para cargar combinaciones ya utilizadas
def load_used_combinations():
    if os.path.exists("used_combinations.json"):
        try:
            with open("used_combinations.json", "r") as file:
                return json.load(file)
        except:
            return []
    else:
        return []

# Funci√≥n para guardar combinaciones utilizadas
def save_used_combination(departamento, ciudad, especialidad):
    combinations = load_used_combinations()
    new_combination = {
        "departamento": departamento,
        "ciudad": ciudad,
        "especialidad": especialidad
    }
    if new_combination not in combinations:
        combinations.append(new_combination)
        with open("used_combinations.json", "w") as file:
            json.dump(combinations, file, indent=4)
        print(f"‚úÖ Combinaci√≥n guardada: {departamento}-{ciudad}-{especialidad}")

# Configurar WebDriver para Microsoft Edge
driver = webdriver.Edge()
driver.maximize_window()
wait = WebDriverWait(driver, 15)

# URL de inicio de sesi√≥n
url = "https://caprendizaje.sena.edu.co/sgva/SGVA_Diseno/pag/login.aspx"
driver.get(url)

# Iniciar sesi√≥n
def login():
    try:
        wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='text']"))).send_keys("900729437")
        wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='password']"))).send_keys("719D62B4")
        wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@type='submit']"))).click()
        print("‚úÖ Inicio de sesi√≥n exitoso.")
    except Exception as e:
        print("‚ùå Error al iniciar sesi√≥n:", e)
        driver.quit()
        exit()

login()

# Funci√≥n para llenar inputs
def fill_input(xpath, value, field_name):
    try:
        field = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
        driver.execute_script("arguments[0].scrollIntoView();", field)
        field.clear()
        field.send_keys(value)
        print(f"‚úÖ {field_name} llenado: {value}")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo llenar {field_name}: {e}")

# Funci√≥n para verificar si existe un modal de error
def check_for_error_modal():
    try:
        # Esperar un breve momento para ver si aparece el modal
        error_message = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//span[@id='modal_respuesta' and contains(text(), 'Ya existe una solicitud')]"))
        )
        print("‚ö†Ô∏è Error: Ya existe una solicitud abierta con esta combinaci√≥n")
        
        # Cerrar el modal
        close_button = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//button[@id='btn_respuesta_cerrar']"))
        )
        driver.execute_script("arguments[0].click();", close_button)
        print("‚úÖ Modal de error cerrado")
        return True
    except:
        return False

# Funci√≥n para crear una solicitud
def create_request(departamento_value, ciudad_value):
    # Ir a la p√°gina de creaci√≥n de solicitud
    solicitudes_url = "https://caprendizaje.sena.edu.co/sgva/Empresa/Solicitudes/Crear"
    driver.get(solicitudes_url)
    time.sleep(3)
    
    used_combinations = load_used_combinations()
    
    # Seleccionar departamento
    wait.until(EC.presence_of_element_located((By.XPATH, "//select[contains(@id, 'departamento')]")))
    departamento_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'departamento')]"))
    departamento_select.select_by_value(departamento_value)
    print(f"üîπ Departamento seleccionado: {departamento_value}")
    time.sleep(2)
    
    # Seleccionar ciudad
    ciudad_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'ciudad')]"))
    ciudad_select.select_by_value(ciudad_value)
    print(f"   ‚Ü≥ Ciudad seleccionada: {ciudad_value}")
    
    # Llenar datos de la solicitud
    fill_input("//input[@id='txt_direccion']", "Bogota calle 15 - 23", "Direcci√≥n")
    fill_input("//input[@id='txt_contacto']", "Nordicol", "Persona de Contacto")
    fill_input("//input[@id='txt_cedula']", "126477323", "C√©dula")
    fill_input("//input[@id='txt_telefono']", "3221234555", "Tel√©fono")
    fill_input("//input[@id='txt_email']", "Nordicol@gmail.com", "Correo Electr√≥nico")
    time.sleep(2)
    
    # Buscar y seleccionar especialidades
    buscar_especialidad_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='btn_especialidad_buscar']")))
    driver.execute_script("arguments[0].scrollIntoView();", buscar_especialidad_btn)
    driver.execute_script("arguments[0].click();", buscar_especialidad_btn)
    time.sleep(2)
    
    # Seleccionar especialidades una por una
    especialidad_select = Select(wait.until(EC.presence_of_element_located((By.ID, "sel_especialidad"))))
    especialidades = [(i, option.get_attribute("value"), option.text) for i, option in enumerate(especialidad_select.options) if i > 0]
    
    especialidad_procesada = False
    
    for idx, especialidad_value, especialidad_text in especialidades:
        # Verificar si esta combinaci√≥n ya fue utilizada
        combinacion_actual = {
            "departamento": departamento_value, 
            "ciudad": ciudad_value, 
            "especialidad": especialidad_value
        }
        
        if combinacion_actual in used_combinations:
            print(f"‚ö†Ô∏è Combinaci√≥n ya utilizada: {departamento_value}-{ciudad_value}-{especialidad_text}")
            continue
        
        # Seleccionar especialidad
        try:
            especialidad_select = Select(wait.until(EC.presence_of_element_located((By.ID, "sel_especialidad"))))
            especialidad_select.select_by_index(idx)
            print(f"‚úÖ Especialidad seleccionada: {especialidad_text}")
        except:
            print(f"‚ö†Ô∏è No se pudo seleccionar la especialidad: {especialidad_text}")
            continue
        
        # Esperar a que las competencias se carguen
        time.sleep(3)
        
        try:
            competencias_div = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@id='div_especialidad_competencias']")))
            competencias = competencias_div.find_elements(By.XPATH, ".//label[@class='empresaLabelTexto']")
            
            if not competencias:
                print("‚ö†Ô∏è No hay competencias disponibles para esta especialidad.")
                continue
                
            competencia_texto = competencias[0].text
            print(f"‚úÖ Competencia laboral copiada: {competencia_texto}")
            
            # Hacer clic en el bot√≥n 'Seleccionar especialidad'
            seleccionar_especialidad_btn = wait.until(EC.element_to_be_clickable((By.ID, "btn_seleccionar_especialidad")))
            driver.execute_script("arguments[0].scrollIntoView();", seleccionar_especialidad_btn)
            time.sleep(1)
            driver.execute_script("arguments[0].click();", seleccionar_especialidad_btn)
            print("‚úÖ Bot√≥n 'Seleccionar especialidad' clicado.")
            
            # Llenar los campos restantes
            fill_input("//textarea[@id='txta_perfil']", "Tecnico prueba", "Perfil del aspirante")
            fill_input("//textarea[@id='txta_funciones']", competencia_texto, "Funciones a desarrollar")
            fill_input("//input[@id='txt_cantidad_aprendices']", "3", "Cantidad de aprendices")
            
            # Seleccionar la fecha de cierre
            fecha_cierre_input = wait.until(EC.element_to_be_clickable((By.ID, "txt_fecha_cierre")))
            driver.execute_script("arguments[0].scrollIntoView();", fecha_cierre_input)
            fecha_cierre_input.click()
            time.sleep(1)
            
            # Seleccionar el primer d√≠a disponible en el calendario
            try:
                fecha_disponible = driver.find_element(By.XPATH, "//td[@data-handler='selectDay']/a")
                fecha_disponible.click()
                print("‚úÖ Fecha de cierre seleccionada.")
            except Exception as e:
                print(f"‚ö†Ô∏è No se pudo seleccionar la fecha de cierre: {e}")
            
            # Hacer clic en 'Crear solicitud de aprendices'
            crear_solicitud_btn = wait.until(EC.element_to_be_clickable((By.ID, "btn_crear_solicitud")))
            driver.execute_script("arguments[0].scrollIntoView();", crear_solicitud_btn)
            driver.execute_script("arguments[0].click();", crear_solicitud_btn)
            print("‚úÖ Solicitud de aprendices enviada.")
            time.sleep(2)
            
            # Verificar si hay un modal de error
            if check_for_error_modal():
                # Guardar esta combinaci√≥n como utilizada
                save_used_combination(departamento_value, ciudad_value, especialidad_value)
                
                # Buscar nueva especialidad
                buscar_especialidad_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='btn_especialidad_buscar']")))
                driver.execute_script("arguments[0].scrollIntoView();", buscar_especialidad_btn)
                driver.execute_script("arguments[0].click();", buscar_especialidad_btn)
                time.sleep(2)
                continue
            
            # Si no hay error, procesar los resultados
            try:
                # Ir a aplicaciones y ver aprendices
                ir_aplicaciones_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Ir a aplicaciones')]")))
                driver.execute_script("arguments[0].scrollIntoView();", ir_aplicaciones_btn)
                driver.execute_script("arguments[0].click();", ir_aplicaciones_btn)
                print("‚úÖ Ir a aplicaciones.")
                time.sleep(2)
                
                ver_aprendices_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Ver Aprendices')]")))
                driver.execute_script("arguments[0].scrollIntoView();", ver_aprendices_btn)
                driver.execute_script("arguments[0].click();", ver_aprendices_btn)
                print("‚úÖ Ver Aprendices.")
                time.sleep(2)
                
                # Extraer datos de aprendices
                aprendices_data = []
                filas = driver.find_elements(By.XPATH, "//table[@id='tabla_aprendices']//tr")
                for fila in filas[1:]:
                    columnas = fila.find_elements(By.TAG_NAME, "td")
                    datos_aprendiz = [columna.text for columna in columnas]
                    aprendices_data.append(datos_aprendiz)
                
                # Guardar datos en Excel con nombre de departamento y ciudad
                excel_filename = f"aprendices_{departamento_value}_{ciudad_value}_{especialidad_value}.xlsx"
                df = pd.DataFrame(aprendices_data, columns=["Nombre", "Documento", "Programa", "Estado"])
                df.to_excel(excel_filename, index=False)
                print(f"‚úÖ Datos de aprendices guardados en {excel_filename}.")
                
                # Guardar esta combinaci√≥n como utilizada
                save_used_combination(departamento_value, ciudad_value, especialidad_value)
                especialidad_procesada = True
                
                # Volver a la p√°gina de creaci√≥n de solicitudes para la siguiente especialidad
                driver.get(solicitudes_url)
                time.sleep(3)
                
                # Reseleccionar departamento y ciudad
                departamento_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'departamento')]"))
                departamento_select.select_by_value(departamento_value)
                time.sleep(1)
                
                ciudad_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'ciudad')]"))
                ciudad_select.select_by_value(ciudad_value)
                time.sleep(1)
                
                # Rellenar los campos nuevamente
                fill_input("//input[@id='txt_direccion']", "Bogota calle 15 - 23", "Direcci√≥n")
                fill_input("//input[@id='txt_contacto']", "Nordicol", "Persona de Contacto")
                fill_input("//input[@id='txt_cedula']", "126477323", "C√©dula")
                fill_input("//input[@id='txt_telefono']", "3221234555", "Tel√©fono")
                fill_input("//input[@id='txt_email']", "Nordicol@gmail.com", "Correo Electr√≥nico")
                time.sleep(2)
                
                buscar_especialidad_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='btn_especialidad_buscar']")))
                driver.execute_script("arguments[0].scrollIntoView();", buscar_especialidad_btn)
                driver.execute_script("arguments[0].click();", buscar_especialidad_btn)
                time.sleep(2)
            
            except Exception as e:
                print(f"‚ùå Error al procesar los resultados: {e}")
                save_used_combination(departamento_value, ciudad_value, especialidad_value)
                
                # Volver a la p√°gina de creaci√≥n
                driver.get(solicitudes_url)
                time.sleep(3)
                
                # Reseleccionar departamento y ciudad
                departamento_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'departamento')]"))
                departamento_select.select_by_value(departamento_value)
                time.sleep(1)
                
                ciudad_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'ciudad')]"))
                ciudad_select.select_by_value(ciudad_value)
                time.sleep(1)
                
                # Rellenar los campos nuevamente
                fill_input("//input[@id='txt_direccion']", "Bogota calle 15 - 23", "Direcci√≥n")
                fill_input("//input[@id='txt_contacto']", "Nordicol", "Persona de Contacto")
                fill_input("//input[@id='txt_cedula']", "126477323", "C√©dula")
                fill_input("//input[@id='txt_telefono']", "3221234555", "Tel√©fono")
                fill_input("//input[@id='txt_email']", "Nordicol@gmail.com", "Correo Electr√≥nico")
                time.sleep(2)
                
                buscar_especialidad_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='btn_especialidad_buscar']")))
                driver.execute_script("arguments[0].scrollIntoView();", buscar_especialidad_btn)
                driver.execute_script("arguments[0].click();", buscar_especialidad_btn)
                time.sleep(2)
        except Exception as e:
            print(f"‚ùå Error al procesar la especialidad: {e}")
    
    return especialidad_procesada

# Funci√≥n principal para recorrer departamentos y ciudades
def main():
    try:
        # Obtener la lista de departamentos
        driver.get("https://caprendizaje.sena.edu.co/sgva/Empresa/Solicitudes/Crear")
        time.sleep(3)
        
        departamento_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'departamento')]"))
        departamentos = [(option.get_attribute("value"), option.text.strip()) for option in departamento_select.options if option.get_attribute("value") != "0"]
        
        for dep_value, dep_text in departamentos:
            # Seleccionar departamento
            departamento_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'departamento')]"))
            departamento_select.select_by_value(dep_value)
            print(f"\nüîπ DEPARTAMENTO: {dep_text} ({dep_value})")
            time.sleep(2)
            
            # Obtener ciudades para este departamento
            ciudad_select = Select(driver.find_element(By.XPATH, "//select[contains(@id, 'ciudad')]"))
            ciudades = [(option.get_attribute("value"), option.text.strip()) for option in ciudad_select.options if option.get_attribute("value") != "0"]
            
            for ciudad_value, ciudad_text in ciudades:
                print(f"\n   ‚Ü≥ CIUDAD: {ciudad_text} ({ciudad_value})")
                
                # Intentar crear solicitud para esta combinaci√≥n departamento-ciudad
                ciudad_procesada = create_request(dep_value, ciudad_value)
                
                if not ciudad_procesada:
                    print(f"‚ö†Ô∏è No se pudieron procesar solicitudes para {dep_text} - {ciudad_text}")
                
                # Volver a la p√°gina de creaci√≥n para la siguiente ciudad
                driver.get("https://caprendizaje.sena.edu.co/sgva/Empresa/Solicitudes/Crear")
                time.sleep(3)
    
    except Exception as e:
        print(f"‚ùå Error general: {e}")
    finally:
        print("\n‚úÖ Proceso finalizado.")
        driver.quit()

# Ejecutar el script
if __name__ == "__main__":
    main()